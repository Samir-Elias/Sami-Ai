// ============================================
// üóÑÔ∏è DEVAI AGENT - PRISMA SCHEMA
// ============================================

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// üë§ USUARIOS
// ============================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  name      String?
  avatar    String?
  
  // Autenticaci√≥n
  password  String
  emailVerified Boolean @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  
  // Configuraci√≥n
  preferences Json @default("{}")
  settings    Json @default("{}")
  timezone    String @default("America/Argentina/Mendoza")
  language    String @default("es")
  
  // APIs del usuario
  apiKeys     ApiKey[]
  
  // Contenido del usuario
  conversations Conversation[]
  projects      Project[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  isActive  Boolean  @default(true)
  
  // √çndices
  @@map("users")
}

// ============================================
// üîë API KEYS
// ============================================

model ApiKey {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  provider String // 'gemini', 'groq', 'huggingface', 'openai'
  keyHash  String // Hash de la API key (nunca almacenar en plain text)
  name     String? // Nombre descriptivo dado por el usuario
  
  // Configuraci√≥n
  isActive Boolean @default(true)
  isDefault Boolean @default(false)
  
  // L√≠mites y uso
  usageCount Int @default(0)
  lastUsedAt DateTime?
  monthlyLimit Int?
  dailyLimit Int?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // √çndices
  @@unique([userId, provider])
  @@map("api_keys")
}

// ============================================
// üí¨ CONVERSACIONES
// ============================================

model Conversation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title   String
  preview String? // Resumen del primer mensaje
  
  // Configuraci√≥n de IA
  aiProvider String? // Provider usado predominantemente
  aiModel    String? // Modelo usado
  
  // Contexto del proyecto (si aplica)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  // Mensajes
  messages Message[]
  
  // Estad√≠sticas
  messageCount Int @default(0)
  totalTokens  Int @default(0)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isArchived Boolean @default(false)
  isPinned   Boolean @default(false)
  
  // √çndices
  @@index([userId, createdAt])
  @@index([userId, isArchived])
  @@map("conversations")
}

// ============================================
// üì® MENSAJES
// ============================================

model Message {
  id             String @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  role    String // 'user', 'assistant', 'system'
  content String
  
  // Metadata de IA
  aiProvider String? // 'gemini', 'groq', etc.
  aiModel    String? // Modelo espec√≠fico usado
  thinking   String? // Proceso de pensamiento (si disponible)
  
  // Tokens y costo
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  estimatedCost    Float?
  
  // Archivos adjuntos
  attachments Json @default("[]") // Array de objetos file
  
  // Feedback del usuario
  rating     Int? // 1-5 stars
  feedback   String?
  
  // Metadata
  createdAt DateTime @default(now())
  editedAt  DateTime?
  
  // √çndices
  @@index([conversationId, createdAt])
  @@map("messages")
}

// ============================================
// üìÅ PROYECTOS
// ============================================

model Project {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  
  // Archivos del proyecto
  files ProjectFile[]
  
  // Estad√≠sticas
  totalFiles    Int @default(0)
  totalSize     BigInt @default(0) // Bytes
  totalLines    Int @default(0)
  primaryLanguage String?
  languages     Json @default("{}") // Objeto con conteos por lenguaje
  
  // An√°lisis
  analysis Json @default("{}") // Resultados de an√°lisis de c√≥digo
  
  // Conversaciones relacionadas
  conversations Conversation[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isArchived Boolean @default(false)
  
  // √çndices
  @@index([userId, createdAt])
  @@map("projects")
}

// ============================================
// üìÑ ARCHIVOS DE PROYECTO
// ============================================

model ProjectFile {
  id        String @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  name     String
  path     String? // Ruta relativa en el proyecto
  content  String
  size     Int
  type     String // Extensi√≥n del archivo
  language String? // Lenguaje detectado
  
  // An√°lisis del archivo
  lineCount    Int @default(0)
  charCount    Int @default(0)
  complexity   Int? // Complejidad ciclom√°tica si aplica
  dependencies Json @default("[]") // Dependencias detectadas
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // √çndices
  @@index([projectId, language])
  @@map("project_files")
}

// ============================================
// üìä ANALYTICS
// ============================================

model Analytics {
  id String @id @default(cuid())
  
  // Informaci√≥n del evento
  event     String // 'message_sent', 'file_uploaded', etc.
  category  String // 'chat', 'project', 'ai', etc.
  action    String // 'create', 'update', 'delete', etc.
  
  // Referencias
  userId         String?
  conversationId String?
  projectId      String?
  
  // Datos del evento
  properties Json @default("{}") // Propiedades espec√≠ficas del evento
  metadata   Json @default("{}") // Metadata adicional
  
  // Contexto
  userAgent String?
  ipAddress String?
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // √çndices
  @@index([event, createdAt])
  @@index([userId, createdAt])
  @@map("analytics")
}

// ============================================
// üîÑ USAGE TRACKING
// ============================================

model Usage {
  id String @id @default(cuid())
  
  userId String
  
  // Per√≠odo de tiempo
  date     DateTime @db.Date
  period   String // 'daily', 'monthly', 'yearly'
  
  // Contadores
  messagesCount    Int @default(0)
  tokensUsed       Int @default(0)
  filesUploaded    Int @default(0)
  projectsCreated  Int @default(0)
  apiCallsCount    Int @default(0)
  
  // Por proveedor de IA
  geminiCalls      Int @default(0)
  groqCalls        Int @default(0)
  huggingfaceCalls Int @default(0)
  ollamaCalls      Int @default(0)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // √çndices
  @@unique([userId, date, period])
  @@index([date, period])
  @@map("usage")
}

// ============================================
// üö® ERROR LOGS
// ============================================

model ErrorLog {
  id String @id @default(cuid())
  
  // Error info
  error     String
  stack     String?
  message   String
  level     String @default("error") // 'error', 'warn', 'info'
  
  // Context
  userId    String?
  endpoint  String?
  method    String?
  userAgent String?
  
  // Request data
  requestBody Json?
  query       Json?
  params      Json?
  
  // Metadata
  createdAt DateTime @default(now())
  resolved  Boolean @default(false)
  
  // √çndices
  @@index([level, createdAt])
  @@index([userId, createdAt])
  @@map("error_logs")
}

// ============================================
// üìã √çNDICES ADICIONALES
// ============================================

// √çndices compuestos para consultas frecuentes
// Ya est√°n definidos arriba con @@index

// √çndices de texto completo (requiere configuraci√≥n adicional en PostgreSQL)
// Se pueden agregar manualmente despu√©s de la migraci√≥n